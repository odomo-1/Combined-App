import streamlit as st
import os
import tempfile
import docx
from docx import Document
import re
from io import BytesIO
from spellchecker import SpellChecker
import pandas as pd
import base64
import fitz  # PyMuPDF for PDF parsing

# --- Constants ---
STANDARD_SECTIONS = [
    "Table of content" or "Table of Contents" or "contents" or "Content",
    "Introduction",
    "Background",
    "Objective",
    "Methodology" or "Approach" or "technical approach",
    "Project Team",
    "About Sahel",
    "Budget",
    "Work Plan",
]

# --- Helper Functions ---
def extract_text(file):
    text = ""
    if file.name.endswith('.docx'):
        temp_path = os.path.join(tempfile.gettempdir(), file.name)
        with open(temp_path, 'wb') as f:
            f.write(file.read())
        doc = Document(temp_path)
        for para in doc.paragraphs:
            text += para.text + '\n'
    return text

def extract_text_from_rfp(file):
    text = ""
    if file.name.endswith(".docx"):
        temp_path = os.path.join(tempfile.gettempdir(), file.name)
        with open(temp_path, "wb") as f:
            f.write(file.read())
        doc = Document(temp_path)
        for para in doc.paragraphs:
            text += para.text + "\n"
    elif file.name.endswith(".pdf"):
        with fitz.open(stream=file.read(), filetype="pdf") as pdf:
            for page in pdf:
                text += page.get_text()
    return text

def extract_rfp_expectations(text):
    expectations = []
    keywords = ["deliverable", "expected", "scope of work", "objective", "goal", "requirements", "outcomes"]
    for line in text.split("\n"):
        if any(k in line.lower() for k in keywords):
            expectations.append(line.strip())
    return list(set(expectations))

def check_expectations_coverage(expectations, proposal_text):
    missing = []
    addressed = []
    proposal_text_lower = proposal_text.lower()
    for exp in expectations:
        if exp.lower() in proposal_text_lower:
            addressed.append(exp)
        else:
            missing.append(exp)
    score = (len(addressed) / len(expectations)) * 100 if expectations else 0
    return score, addressed, missing

def evaluate_proposal(text, required_sections, doc):
    lower_text = text.lower()

    section_results = {}
    for sec in required_sections:
        found = any(sec.lower() in para.text.lower() for para in doc.paragraphs)
        section_results[sec] = found

    section_score = sum(section_results.values())
    section_percentage = (section_score / len(required_sections)) * 100

    formatting_results = formatting_check(doc)

    total_score = 0
    max_score = 100

    methodology_components = [
        "project kick-off", "project inception", "desk review", "data collection",
        "data analysis", "data management", "report development",
        "deliverables", "output", "outputs"
    ]

    section_weight = 0.35
    total_score += section_percentage * section_weight

    spelling_weight = 0.20
    spell_score = 100 if not formatting_results['spelling_issues'] else max(0, 100 - len(formatting_results['spelling_issues']) * 10)
    total_score += spell_score * spelling_weight

    methodology_weight = 0.25
    methodology_text = "\n".join(
        para.text for para in doc.paragraphs if "methodology" in para.text.lower() or "approach" in para.text.lower()
    ).lower()
    missing_components = [comp for comp in methodology_components if comp not in methodology_text]
    methodology_score = 100 if not missing_components else 100 - (len(missing_components) * 10)
    total_score += methodology_score * methodology_weight

    formatting_weight = 0.20
    font_style_score = 100 if formatting_results['font_ok'] else 0
    font_size_score = 100 if formatting_results['font_size_ok'] else 0
    formatting_score = (font_style_score + font_size_score) / 2
    total_score += round(formatting_score * formatting_weight)

    missing_sections = [sec for sec, present in section_results.items() if not present]
    recommendations = []
    if missing_sections:
        recommendations.append(f"Kindly include the following missing sections: {', '.join(missing_sections)}")
    if formatting_results['spelling_issues']:
        recommendations.append("Spelling issues found in the document.")
    if not formatting_results['font_ok']:
        recommendations.append("Document should use font 'Tenorite' or 'Candara' throughout.")
    if not formatting_results['font_size_ok']:
        recommendations.append("Body text should use font size 11.")
    if missing_components:
        recommendations.append(f"The methodology section is missing the following components: {', '.join(set(missing_components)).title()}")

    return {
        'sections': section_results,
        'score': total_score,
        'recommendations': recommendations,
        'formatting': formatting_results
    }

def formatting_check(doc):
    spell = SpellChecker()
    text = "\n".join([para.text for para in doc.paragraphs])
    words = re.findall(r'\b\w+\b', text.lower())
    misspelled = spell.unknown(words)
    spelling_issues = list(misspelled)[:15]

    font_ok = True
    font_size_ok = True
    for para in doc.paragraphs:
        for run in para.runs:
            if run.font.name and run.font.name.lower() not in ["tenorite", "candara"]:
                font_ok = False
            if run.font.size and run.font.size.pt != 11:
                if para.style.name not in ['Heading 1', 'Heading 2', 'Heading 3']:
                    font_size_ok = False
        if not font_ok or not font_size_ok:
            break

    return {
        "spelling_issues": spelling_issues,
        "font_ok": font_ok,
        "font_size_ok": font_size_ok
    }

def create_word_report(evaluation, rfp_score=None, rfp_missing=None):
    doc = Document()
    doc.add_heading("Proposal Evaluation Report", level=1)

    doc.add_heading("Section Check", level=2)
    for section, found in evaluation['sections'].items():
        doc.add_paragraph(f"{section}: {'Present' if found else 'Missing'}")

    doc.add_heading("Formatting & Presentation", level=2)
    if evaluation['formatting']['spelling_issues']:
        doc.add_paragraph("Spelling Issues Detected:")
        doc.add_paragraph(", ".join(evaluation['formatting']['spelling_issues']))
    else:
        doc.add_paragraph("No major spelling issues detected.")
    if evaluation['formatting']['font_ok'] and evaluation['formatting']['font_size_ok']:
        doc.add_paragraph("Font style and size meet organizational standards (Tenorite or Candara, size 11).")
    else:
        doc.add_paragraph("Font style does not match standard (Tenorite or Candara) or font size is not 11 in body text.")

    doc.add_heading("Overall Score", level=2)
    doc.add_paragraph(f"{evaluation['score']}%")

    doc.add_heading("Recommendations", level=2)
    if evaluation['recommendations']:
        for rec in evaluation['recommendations']:
            doc.add_paragraph(f"- {rec}")
    else:
        doc.add_paragraph("All criteria met. Great job!")

    if rfp_score is not None:
        doc.add_heading("RFP Alignment", level=2)
        doc.add_paragraph(f"RFP Coverage Score: {round(rfp_score)}%")
        if rfp_missing:
            doc.add_paragraph("Missing RFP Expectations:")
            for miss in rfp_missing:
                doc.add_paragraph(f"- {miss}")

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# --- Streamlit Interface ---
st.set_page_config(page_title="Strategy Unit Toolkit", page_icon=":briefcase:", layout="wide")

# Background Image
current_dir = os.path.dirname(__file__)
with open(os.path.join(current_dir, "background.jpg"), "rb") as file:
    encoded_string = base64.b64encode(file.read()).decode()
    st.markdown(f"""
        <style>
        .stApp {{
            background-image: linear-gradient(rgba(255, 255, 255, 0.94), rgba(255, 255, 255, 0.94)),
            url("data:image/jpg;base64,{encoded_string}");
            background-attachment: fixed;
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }}
        </style>
    """, unsafe_allow_html=True)

st.image("Sahel Consulting (Official).png", width=300)
st.title(":green[Strategy Unit Toolkit]")
st.write(":orange[Welcome! Upload the Proposal and RFP to evaluate alignment and quality.]")

uploaded_proposal = st.file_uploader("Upload Proposal (.docx only)", type=["docx"])
uploaded_rfp = st.file_uploader("Upload RFP (.docx or .pdf)", type=["docx", "pdf"])
evaluation = None
rfp_score = None
rfp_missing = []

if uploaded_proposal and st.button("Evaluate Proposal"):
    st.success("Proposal uploaded successfully.")
    prop_text = extract_text(uploaded_proposal)
    doc = Document(uploaded_proposal)
    with st.spinner("Evaluating proposal..."):
        evaluation = evaluate_proposal(prop_text, STANDARD_SECTIONS, doc)

    if uploaded_rfp:
        with st.spinner("Checking alignment with RFP..."):
            rfp_text = extract_text_from_rfp(uploaded_rfp)
            rfp_expectations = extract_rfp_expectations(rfp_text)
            rfp_score, rfp_addressed, rfp_missing = check_expectations_coverage(rfp_expectations, prop_text)

if evaluation:
    st.subheader("Evaluation Results")
    st.write("### Section Check")
    for section, found in evaluation['sections'].items():
        st.write(f"- **{section}**: {'✅' if found else '❌'}")

    st.write("### Formatting & Presentation")
    if evaluation['formatting']['spelling_issues']:
        st.warning("Spelling Issues Detected:")
        st.write(", ".join(evaluation['formatting']['spelling_issues']))
    else:
        st.success("No major spelling issues detected.")

    if evaluation['formatting']['font_ok'] and evaluation['formatting']['font_size_ok']:
        st.success("Font style and size meet organizational standards (Tenorite or Candara, size 11).")
    else:
        st.warning("Font style or font size issue detected.")

    st.write(f"### Overall Score: **{round(evaluation['score'])}%**")

    st.write("### Recommendations")
    if evaluation['recommendations']:
        for rec in evaluation['recommendations']:
            st.warning(rec)
    else:
        st.success("Your proposal aligns well with the standards!")

    if rfp_score is not None:
        st.write("### RFP Alignment")
        st.info(f"RFP Coverage Score: **{round(rfp_score)}%**")
        if rfp_missing:
            st.warning("Missing Expectations from RFP:")
            for miss in rfp_missing:
                st.write(f"- {miss}")

    word_buffer = create_word_report(evaluation, rfp_score, rfp_missing)
    st.download_button(
        label="Download Evaluation Report (.docx)",
        data=word_buffer,
        file_name="proposal_evaluation.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
